install.packages("caret")
install.packages("RORC")
install.packages("tm")
install.packages(c("reshape2","tidyr")
)
install.packages(c("e1071","gbm","randomForest"))
install.packages(c("RWeka","glmnet","lars"))
quit()
install.packages(RVowpalWabbit")
""
install.packages("RVowpalWabbit")
install.packages(c("plyr","readr"))
install.packages(c("plyr","readr"))
quit()
install.packages("xgboost")
install.packages("DiagrammeR")
quit()
install.packages(caret)
install.packages("caret")
install.packages(c("caretensemble","MASS","rpart"))
install.packages("caretEnsemble")
install.packages("data.table")
install.packages("glm")
install.packages("randomForest")
install.packages(c("dplyr","tidy"))
install.packages("nmle")
install.package("rpart.plot")
install.packages("rpart.plot")
install.packages("pROC")
quit()
install.packages("purrr")
install.packages("broom")
imstall.packages("ipred")
install.packages("ipred)
.
e
ry
install.packages("gbm")
install.packages("readr")
quit()
install.packages("rms")
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Projects_simulate/Marketing_analytics')
library(dplyr)
library(ggplot2)
library(corrplot)
salesData <- read.csv("salesData.csv", header=TRUE, sep=",")
# Structure of dataset
str(salesData, give.attr = FALSE)
# Visualization of correlations
salesData %>% select_if(is.numeric) %>%
select(-id) %>% cor() %>%
corrplot()
## display corr plot
# Frequent stores
ggplot(salesData) +
geom_boxplot(aes(x = mostFreqStore, y = salesThisMon))
# Preferred brand
ggplot(salesData) +
geom_boxplot(aes(x = preferredBrand, y = salesThisMon))
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Projects_simulate/Marketing_analytics')
library(dplyr)
library(ggplot2)
library(corrplot)
salesData <- read.csv("salesData.csv", header=TRUE, sep=",")
# Structure of dataset
str(salesData, give.attr = FALSE)
# Visualization of correlations
salesData %>% select_if(is.numeric) %>%
select(-id) %>% cor() %>%
corrplot()
## display corr plot
# Frequent stores
ggplot(salesData) +
geom_boxplot(aes(x = mostFreqStore, y = salesThisMon))
# Preferred brand
ggplot(salesData) +
geom_boxplot(aes(x = preferredBrand, y = salesThisMon))
library(rms)
knitr::opts_chunk$set(echo = TRUE)
# Model specification using lm
salesSimpleModel <- lm(salesThisMon ~ salesLast3Mon,
data = salesData)
# Looking at simple linear model summary
summary(salesSimpleModel)
read.csv("salesDataMon2to4.csv", header=TRUE, sep=",")
salesData2_4 <- read.csv("salesDataMon2To4.csv", header=TRUE, sep=",")
salesData2_4 <- read.csv("salesDataMon2To4.csv", header=TRUE, sep=",")
setwd('C:/Projects_simulate/Marketing_analytics')
salesData2_4 <- read.csv("salesDataMon2To4.csv", header=TRUE, sep=",")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
install.packages("SDMTools")
# Construct the in-sample confusion matrix
library(SDMTools)
confMatrixModelNew <- confusion.matrix(defaultData$PaymentDefault,defaultData$predNew, threshold = 0.5)
confMatrixModelNew
# Calculate the accuracy...
accuracyNew <- sum(diag(confMatrixModelNew)) / sum(confMatrixModelNew)
accuracyNew
# and compare it to the full model's accuracy
accuracyFull
---
title: "ChurnPrevention"
author: "TriDoan"
date: "April 21, 2019"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
This is a simulate customer churn retention project
The purpose of Churn prevention is a measure to ensure that customers visit the online shop again.
```{r }
setwd('C:/Projects_simulate/Marketing_analytics')
library(dplyr)
library(ggplot2)
library(corrplot)
defaultData <- read.csv("defaultData.csv", header=TRUE, sep=";")
```
0. Explore data
```{r}
# Summary of data
summary(defaultData)
# Look at data structure
str(defaultData)
# Analyze the balancedness of dependent variable
ggplot(defaultData,aes(x = PaymentDefault)) +
geom_histogram(stat = "count")
```
1. Using glm model to built logistic regression
```{r}
# Build logistic regression model
logitModelFull <- glm(PaymentDefault ~ limitBal + sex + education + marriage +
age + pay1 + pay2 + pay3 + pay4 + pay5 + pay6 + billAmt1 +
billAmt2 + billAmt3 + billAmt4 + billAmt5 + billAmt6 + payAmt1 +
payAmt2 + payAmt3 + payAmt4 + payAmt5 + payAmt6,
family = binomial, data = defaultData)
# Take a look at the model
summary(logitModelFull)
# Take a look at the odds
coefsexp <- coef(logitModelFull) %>% exp() %>% round(2)
coefsexp
```
3. Implement model selection
```{r}
library(MASS)
# The old (full) model
logitModelFull <- glm(PaymentDefault ~ limitBal + sex + education + marriage +
age + pay1 + pay2 + pay3 + pay4 + pay5 + pay6 + billAmt1 +
billAmt2 + billAmt3 + billAmt4 + billAmt5 + billAmt6 + payAmt1 +
payAmt2 + payAmt3 + payAmt4 + payAmt5 + payAmt6,
family = binomial, defaultData)
#Build the new model
logitModelNew <- stepAIC(logitModelFull,trace=0)
#Look at the model
summary(logitModelNew)
# Save the formula of the new model (it will be needed for the out-of-sample part)
formulaLogit <- as.formula(summary(logitModelNew)$call)
formulaLogit
```
4. Evaluate model
``{r}
# Make predictions using the full Model
defaultData$predFull <- predict(logitModelFull, type = "response", na.action = na.exclude)
# Construct the in-sample confusion matrix
confMatrixModelFull <- confusion.matrix(defaultData$PaymentDefault,defaultData$predFull, threshold = 0.5)
confMatrixModelFull
# Calculate the accuracy for the full Model
accuracyFull <- sum(diag(confMatrixModelFull)) / sum(confMatrixModelFull)
accuracyFull
```
5. Compare simple and full model
```{r}
# Calculate the accuracy for 'logitModelNew'
# Make prediction
defaultData$predNew <- predict(logitModelNew, type = "response", na.action = na.exclude)
library(SDMTools)
confMatrixModelNew <- confusion.matrix(defaultData$PaymentDefault,defaultData$predNew, threshold = 0.5)
confMatrixModelNew
# Calculate the accuracy...
accuracyNew <- sum(diag(confMatrixModelNew)) / sum(confMatrixModelNew)
accuracyNew
# and compare it to the full model's accuracy
accuracyFull
confMatrixModelNew
# Calculate the accuracy for 'logitModelNew'
# Make prediction
defaultData$predNew <- predict(logitModelNew, type = "response", na.action = na.exclude)
# Construct the in-sample confusion matrix
confMatrixModelNew <- confusion.matrix(defaultData$PaymentDefault,defaultData$predNew, threshold = 0.5)
confMatrixModelNew
# Calculate the accuracy...
accuracyNew <- sum(diag(confMatrixModelNew)) / sum(confMatrixModelNew)
accuracyNew
# and compare it to the full model's accuracy
accuracyFull
---
title: "ChurnPrevention"
author: "TriDoan"
date: "April 21, 2019"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
This is a simulate customer churn retention project
The purpose of Churn prevention is a measure to ensure that customers visit the online shop again.
```{r }
setwd('C:/Projects_simulate/Marketing_analytics')
library(dplyr)
library(ggplot2)
library(corrplot)
defaultData <- read.csv("defaultData.csv", header=TRUE, sep=";")
```
0. Explore data
```{r}
# Summary of data
summary(defaultData)
# Look at data structure
str(defaultData)
# Analyze the balancedness of dependent variable
ggplot(defaultData,aes(x = PaymentDefault)) +
geom_histogram(stat = "count")
```
1. Using glm model to built logistic regression
```{r}
# Build logistic regression model
logitModelFull <- glm(PaymentDefault ~ limitBal + sex + education + marriage +
age + pay1 + pay2 + pay3 + pay4 + pay5 + pay6 + billAmt1 +
billAmt2 + billAmt3 + billAmt4 + billAmt5 + billAmt6 + payAmt1 +
payAmt2 + payAmt3 + payAmt4 + payAmt5 + payAmt6,
family = binomial, data = defaultData)
# Take a look at the model
summary(logitModelFull)
# Take a look at the odds
coefsexp <- coef(logitModelFull) %>% exp() %>% round(2)
coefsexp
```
3. Implement model selection
```{r}
library(MASS)
# The old (full) model
logitModelFull <- glm(PaymentDefault ~ limitBal + sex + education + marriage +
age + pay1 + pay2 + pay3 + pay4 + pay5 + pay6 + billAmt1 +
billAmt2 + billAmt3 + billAmt4 + billAmt5 + billAmt6 + payAmt1 +
payAmt2 + payAmt3 + payAmt4 + payAmt5 + payAmt6,
family = binomial, defaultData)
#Build the new model
logitModelNew <- stepAIC(logitModelFull,trace=0)
#Look at the model
summary(logitModelNew)
# Save the formula of the new model (it will be needed for the out-of-sample part)
formulaLogit <- as.formula(summary(logitModelNew)$call)
formulaLogit
```
4. Evaluate model
``{r}
# Make predictions using the full Model
defaultData$predFull <- predict(logitModelFull, type = "response", na.action = na.exclude)
# Construct the in-sample confusion matrix
confMatrixModelFull <- confusion.matrix(defaultData$PaymentDefault,defaultData$predFull, threshold = 0.5)
confMatrixModelFull
# Calculate the accuracy for the full Model
accuracyFull <- sum(diag(confMatrixModelFull)) / sum(confMatrixModelFull)
accuracyFull
```
5. Compare simple and full model
```{r}
# Calculate the accuracy for 'logitModelNew'
# Make prediction
defaultData$predNew <- predict(logitModelNew, type = "response", na.action = na.exclude)
```
6. Calculate confusion matrix
```{r}
# Construct the in-sample confusion matrix
library(SDMTools)
# Calculate the accuracy for 'logitModelNew'
# Make prediction
defaultData$predNew <- predict(logitModelNew, type = "response", na.action = na.exclude)
# Construct the in-sample confusion matrix
confMatrixModelNew <- confusion.matrix(defaultData$PaymentDefault,defaultData$predNew, threshold = 0.5)
confMatrixModelNew
# Calculate the accuracy...
accuracyNew <- sum(diag(confMatrixModelNew)) / sum(confMatrixModelNew)
accuracyNew
View(logitModelFull)
confMatrixModelNew
accuracyNew <- sum(diag(confMatrixModelNew)) / sum(confMatrixModelNew)
accuracyNew
